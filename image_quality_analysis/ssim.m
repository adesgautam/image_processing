clear all;clc;pkg load image;% Original Imageref = rgb2gray(imread('lena.png'));% Add noise noisy = imnoise(ref, 'salt & pepper', 0.5);% SSIM implementationL = 255;c1 = (0.01 * L)^2;c2 = (0.03 * L)^2;% get reference image size[M1 N1] = size(ref);% calculate mean of the reference imagemean_ref = sum(ref(:))/(M1*N1);% get noisy image size[M2 N2] = size(noisy);% calculate mean of the noisy imagemean_noisy = sum(noisy(:))/(M2*N2);% calculate standard deviation of the reference imagex = (ref-mean_ref) .^ 2;std_dev_ref = sqrt(sum(x(:)) / ((M1*N1)-1));% calculate standard deviation of the noisy imagey = (noisy-mean_noisy) .^ 2;std_dev_noisy = sqrt(sum(y(:)) / ((M2*N2)-1));% calculate cross-covariance for the imagesab = sum((ref(:)-mean_ref) .* (noisy(:)-mean_noisy));cross_covar = ab/((M1*M2)-1);% calculate ssimn1 = (2*mean_ref*mean_noisy) + c1;n2 = (2*cross_covar) + c2;d1 = (mean_ref)^2 + (mean_noisy)^2 + c1;d2 = (std_dev_ref)^2 + (std_dev_noisy)^2 + c2;ssim = (n1*n2)/(d1*d2);figure; imshow(ref); title("Original Image");figure; imshow(noisy); title("Noisy Image");fprintf('\n The Structural Similarity (SSIM) Index quality assessment index is %0.4f\n', ssim);imwrite(noisy, "results/s&p_noise_0.5.jpg");